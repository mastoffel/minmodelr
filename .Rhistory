View(datafacgen)
gendist.mds <- isoMDS(gendist)
stressplot(gendist.mds,gendist)
ordiplot(gendist.mds)
gen.mds <- metaMDS(datafacgen)
gen.mds
plot(gen.mds,type = "t")
fit <- factanal(datafacgen, 3, rotation = "promax")
print(fit, digits = 1, cutoff = .5, sort = TRUE)
fit <- factanal(datafacgen, 4, rotation = "promax")
print(fit, digits = 1, cutoff = .5, sort = TRUE)
load <- fit$loadings[, 1:2]
plot(load, type = "n")
text(load,labels=names(datafacgen),cex=.7)
View(datafac)
View(datafacgen)
cor(datafacgen)
genmat <- as.matrix(cor(datafacgen))
View(genmat)
View(data)
data[, 3:numVar] <- lapply(data[, 3:numVar], factor)
model <- MinMod(data)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", header = TRUE)
model <- MinMod(data)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", header = TRUE)
model <- MinMod(datafac)
View(datafac)
?read.table
View(datafac)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("int",2),rep("factor",98), header = TRUE)
)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("int",2),rep("factor",97), header = TRUE)
)
View(datafac)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("num",2),rep("factor",98), header = TRUE))
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("num",2),rep("factor",97), header = TRUE))
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep(num,2),rep("factor",97), header = TRUE))
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("num",2),rep("factor",97)), header = TRUE))
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("num",2),rep("factor",98)), header = TRUE))
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("num",2),rep("factor",98)), header = TRUE)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", header = TRUE)
str(datafac[, 1])
str(datafac[, 2])
str(datafac[, 3])
str(datafac[, 4])
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c("char",rep("num",2),rep("factor",98)), header = TRUE)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c("char",rep("num",2),rep("factor",97)), header = TRUE)
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c("character",rep("numeric",2),rep("factor",97)), header = TRUE)
View(datafac)
View(datafac)
str(datafac[, 1])
str(datafac[, 2])
str(datafac[, 3])
str(datafac[, 4])
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("numeric",2),rep("factor",97)), header = TRUE, row.names = NULL)
str(datafac[, 1])
str(datafac[, 2])
str(datafac[, 3])
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("numeric",2),rep("factor",98)), header = TRUE, row.names = NULL)
datafac[, 100]
str(datafac[, 100])
model <- MinMod(datafac)
model[[1]]
model[[2]]
model[[1]]
testmodel <- glm(day_falling ~. , data = datafac[, 2:numVar])
testmodel
summary(datafac)
summary(testmodel)
View(datafac)
View(datafac)
library(minmodelr)
library(devtools)
install_github("Thinkmart","minmodelr")
traceback()
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
library(devtools)
install_github("Thinkmarti","minmodelr")
?libcurl
library(packrats)
library(packrat)
install_github("Thinkmarti","minmodelr")
install_github("Thinkmarti","minmodelr", ref = "dev")
install_github("Hadley","devtools")
?detach
detach("package:bitops", unload=TRUE)
detach("package:devtools", unload=TRUE)
detach("package:packrat", unload=TRUE)
detach("package:RCurl", unload=TRUE)
install_github("Hadley","devtools")
library(devtools)
install_github("Hadley","devtools")
mean(c(21,26,27,24,28,28,26,30)	)
library(minmodelr)
library(minmodelr)
data(cars)
load(cars)
View(cars)
data(ToothGrowth)
View(cars)
library(datasets)
data(cars)
data()
data(cars, package="datasets")
ls
ls()
rm(ls())
rm(data,ToothGrowth)
rm(cars)
data()
data(mtcars)
mtcars
View(mtcars)
library(minmodelr)
mod <- MinMod(mtcars)
DelTestVar(mtcars)
?DelTestVar
tab <- DelTestVar(mtcars)
View(tab)
View(mtcars)
data()
Titanic
data(Titanic)
Titanic
data(Titanic)
Titanic
data(esoph)
esoph
View(esoph)
data(crimtab)
crimtab
ophi <- read.table("c:/martin/Studium/projects/ophionotus/files/Ophionotus_GLM_4.txt",
colClasses = c(rep("numeric",2),rep("factor",98)),
header = TRUE, row.names = NULL)
ophi <- read.table("c:/Martin/Studium/projects/ophionotus/files/Ophionotus_GLM_4.txt",
colClasses = c(rep("numeric",2),rep("factor",98)),
header = TRUE, row.names = NULL)
ophi <- read.table("Ophionotus_GLM_4.txt",
colClasses = c(rep("numeric",2),rep("factor",98)),
header = TRUE, row.names = NULL)
df <- ohpi
df <- ophi
dfBase <- subset(df, select = 2:ncol(df))
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
View(dfBase)
names(dfBase)[1]
depVar <- df[1]
View(depVar)
names(depVar) <- names(df)[1]
View(depVar)
test <- "F"
if (ncol(dfBase)==2) {
model <- glm(depVar ~., data = subset(dfBase, select = 1), family = family)
print(summary(model))
return(list(ModelData = df,
BestModel = model))
}
stopdeleting <- FALSE
numVars <- ncol(dfBase)
model1 <- glm(depVar ~., data = dfBase, family = family)
View(df)
model1 <- glm(df[1] .~ , data = dfBase, family = family)
depVar <- df[, 1]
names(depVar) <- names(df)[1]
model1 <- glm(depVar ~., data = dfBase, family = family)
depVar <- names(df)[1]
glm(df[, depVar] .~, data = df)
glm(df[, depVar] ~. , data = df)
summary(glm(df[, depVar] ~. , data = df))
?runif
points <- runif(10000, min = 0, max = 10)
points
points2 <- runif(10000, min = 0, max = 10)
depVar <- names(df)[1]
dfBase <- subset(df, select = 2:ncol(df))
View(dfBase)
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
names(depVar) <- names(df)[1]
numVars <- ncol(dfBase)
family <- "gaussian"
model1 <- glm(depVar ~., data = dfBase, family = family)
pvalues <- vector()
?subset
model <- glm(df[, depVar] ~., data = df, family = family)
depVar <- names(df)[1]
model <- glm(df[, depVar] ~., data = df, family = family)
summary(model)
model <- glm(day_falling ~., data = df, family = family)
summary(model)
model <- glm(depVar ~., data = df, family = family)
?as.name
model <- glm(as.name(depVar) ~., data = df, family = family)
model <- glm(assign(depVar) ~., data = df, family = family)
assign(depVar, df[1])
x <- as.name(depVar)
x
model <- glm(x ~., data = df, family = family)
dfBase <- subset(df, select = 2:ncol(df))
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
if (test == "Chisq") {indat <- 5}
if (test == "F") {indat <- 6}
if (ncol(dfBase)==2) {
model <- glm(depVar ~., data = subset(dfBase, select = 1), family = family)
print(summary(model))
return(list(ModelData = df,
BestModel = model))
}
i <- 4
numVars <- ncol(dfBase)
# model1
model1 <- glm(depVar ~., data = dfBase, family = family)
# create pvalue vector
pvalues <- vector()
del <- i
dfTemp <- dfBase[, -del]
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
summary(model2)
del <- i
dfTemp <- dfBase[, -del]
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
remove <- which.max(pvalues)  ## +1 because dependent variable is in column one of df
if (pvalues[remove] <= 0.05){
stopdeleting  <- TRUE
bestmodeldf <- dfBase
# stop if just one variable left in dfTemp
} else if ((pvalues[remove] > 0.05) & ((numVars)==2)){
stopdeleting <- TRUE
bestmodeldf <- subset(dfBase, select = -remove)
# go on with removed variable
} else {
dfBase <- dfBase[, -remove]
if exists(removed_df){
removed_df <- cbind(removed_df, subset(dfBase, select = remove))
dfBaseNew <- dfBase[, -remove]
removed_df <- data.frame(dfBase[remove])
View(removed_df)
pvals <- c(1, 2, 4, 0.5, 0.4, 0.6, 0.7)
pvals[pvals < 0.5]
which(pvals[pvals < 0.5])
find(pvals[pvals < 0.5])
find(pvals[pvals < 0.5])
which.max(pvals)
which(pvals<0.5)
pvals <- c(1, 2, 4, 0.5, 0.4, 0.6, 0.7, 0.3)
which(pvals<0.5)
which(pvals<0)
p <- which(pvals<0)
p
class(p)
p == 0
library(roxygen2)
library(devtools)
document()
document()
points <- runif(10000, min = 0, max = 14.94)
points2 <- runif(10000, min = 0, max = 14.94)
points3 <- runif(10000, min = 0, max = 14.94)
points4 <- runif(10000, min = 0, max = 14.94)
sqrt((points-points2)^2 + (points3-points4)^2)
mean(sqrt((points-points2)^2 + (points3-points4)^2))
document()
document()
library(minmodelr)
?minmodelr
df <- read.table(Ophionotus_GLM_4.txt)
df <- read.table("Ophionotus_GLM_4.txt")
View(df)
df <- read.table("Ophionotus_GLM_4.txt", header = TRUE)
stopdeleting <- FALSE
## get df with indpendent vars
dfBase <- subset(df, select = 2:ncol(df))
## get vector with dependent var
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
## which test is used
test <- "F"
family <- "Gaussian"
## which test is used
if (test == "Chisq") {indat <- 5}
if (test == "F") {indat <- 6}
numVars <- ncol(dfBase)
# model1
model1 <- glm(depVar ~., data = dfBase, family = family)
family <- "gaussian"
model1 <- glm(depVar ~., data = dfBase, family = family)
# create pvalue vector
pvalues <- vector()
for (i in 1:ncol(dfBase)) {
# Remove var
del <- i
dfTemp <- dfBase[, -del]
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
if (exists(removed_df)){
for (i in 1:ncol(removed_df)) {
# Remove var
add <- i
dfTemp <- cbind(dfBase, removed_df[i])
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
}
removed_df <- 4
exists("removed_df")
library(minmodelr)
test <- minmodelr(df)
rm(removed_df)
test <- minmodelr(df)
library(minmodelr)
test <- minmodelr(df)
exists(df)
exists("df")
dfBase <- subset(df, select = 2:ncol(df))
## get vector with dependent var
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
## which test is used
if (test == "Chisq") {indat <- 5}
if (test == "F") {indat <- 6}
## check case of just one independent variable and return glm if true
if (ncol(dfBase)==2) {
model <- glm(depVar ~., data = subset(dfBase, select = 1), family = family)
print(summary(model))
return(list(ModelData = df,
BestModel = model))
}
while (stopdeleting == FALSE) {
# number of variables
numVars <- ncol(dfBase)
# model1
model1 <- glm(depVar ~., data = dfBase, family = family)
# create pvalue vector
pvalues <- vector()
## delete every variable, make comparison and take the least significant out
for (i in 1:ncol(dfBase)) {
# Remove var
del <- i
dfTemp <- dfBase[, -del]
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
remove <- which.max(pvalues)  ## +1 because dependent variable is in column one of df
# check if there were already variables removed and if it would be significant to add them again
if (exists("removed_df")){
for (i in 1:ncol(removed_df)) {
# Remove var
add <- i
dfTemp <- cbind(dfBase, removed_df[i])
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
}
# add terms which would give an
add <- which(pvalues < 0.5)  ## +1 because dependent variable is in column one of df
# stop if deleting variable with highest p value leads to a significant different model
if (pvalues[remove] <= 0.05){
stopdeleting  <- TRUE
bestmodeldf <- dfBase
# stop if just one variable left in dfTemp
} else if ((pvalues[remove] > 0.05) & ((numVars)==2)){
stopdeleting <- TRUE
#
bestmodeldf <- subset(dfBase, select = -remove)
bestmodeldf <- cbind(dfBase, removed_df[, add])
# go on with removed variable
} else {
# delete variable with highest pval
dfBaseNew <- dfBase[, -remove]
# add variables for which adding improve model significantly
bestmodeldf <- cbind(dfBase, removed_df[, add])
if (exists("removed_df")){
removed_df <- cbind(removed_df, dfBase[remove])
} else {
removed_df <- data.frame(dfBase[remove])
}
if (exists("removed_df") & length(add)==0) {
removed_df <- removed_df[, -add]
}
}
}
bestmodel <- glm(depVar ~., data = bestmodeldf, family = family)
stopdeleting <- FALSE
## get df with indpendent vars
dfBase <- subset(df, select = 2:ncol(df))
## get vector with dependent var
depVar <- df[, 1]
names(depVar) <- names(dfBase)[1]
## which test is used
if (test == "Chisq") {indat <- 5}
if (test == "F") {indat <- 6}
## check case of just one independent variable and return glm if true
if (ncol(dfBase)==2) {
model <- glm(depVar ~., data = subset(dfBase, select = 1), family = family)
print(summary(model))
return(list(ModelData = df,
BestModel = model))
}
numVars <- ncol(dfBase)
# model1
model1 <- glm(depVar ~., data = dfBase, family = family)
# create pvalue vector
pvalues <- vector()
## delete every variable, make comparison and take the least significant out
for (i in 1:ncol(dfBase)) {
# Remove var
del <- i
dfTemp <- dfBase[, -del]
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
remove <- which.max(pvalues)  ## +1 because dependent variable is in column one of df
if (exists("removed_df")){
for (i in 1:ncol(removed_df)) {
# Remove var
add <- i
dfTemp <- cbind(dfBase, removed_df[i])
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues[i] <- modelCompare[2, indat]
}
}
add <- which(pvalues < 0.5)  ## +1 because dependent variable is in column one of df
if (exists("removed_df")){
for (i in 1:ncol(removed_df)) {
# Remove var
add <- i
dfTemp <- cbind(dfBase, removed_df[i])
# compute glm
model2 <- glm(depVar ~., data = dfTemp, family = family)
# ANOVA for model comparison
modelCompare <- anova(model1, model2, test = test)
# get p values in vector
pvalues2[i] <- modelCompare[2, indat]
}
}
add <- which(pvalues2 < 0.05)  ## +1 because dependent variable is in column one of df
if (exists("pvalues2")) {
add <- which(pvalues2 < 0.05)  ## +1 because dependent variable is in column one of df
}
dfBaseNew <- dfBase[, -remove]
# add variables for which adding improve model significantly
bestmodeldf <- cbind(dfBase, removed_df[, add])
library(minmodelr)
test <- minmodelr(df)
test <- MinMod(df)
View(df)
test <- MinMod(df)
class(df)
class(df[, 1])
class(df[, 3])
class(df[, 4])
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(devtools)
library(plr)
library(plyr)
?plyr
library(devtools)
library(roxygen2)
document()
document()
library(minmodelr)
library(minmodelr)
document()
library(devtools)
document()
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
library(minmodelr)
