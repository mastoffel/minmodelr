?gsub
t <- gsub("IL", names(training))
t <- gsub("IL", x <- names(training))
t <- gsub("IL", x = names(training))
t <- grep("IL", x = names(training))
t
?grep
inds <- grep("IL", x = names(training))
?preProcess
pcp <- preProcess(training[, inds], thresh = 0.8)
pcp
summary(pcp)
str(pcp)
pcp$numComp
pcp <- preProcess(training[, inds], method = "pca", thresh = 0.8)
pcp$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- grep("IL", names(training))
names(training)
training_new <- cbind(training$diagnosis, training[IL])
modFit <- train(diagnosis ~., data = training_new, method = "glm")
modFit <- train(diagnosis ~., data = training_new, method = "glm")
modFit <- train(training_new$diagnosis ~., data = training_new, method = "glm")
modFit <- train(diagnosis ~., data = training_new, method = "glm")
names(training_new)
training_new <- cbind(training["diagnosis"], training[IL])
names(training_new)
modFit <- train(diagnosis ~., data = training_new, method = "glm")
pred <- predict(test, modFit)
pred <- predict(testing, modFit)
pred <- predict(testing$diagnosis, modFit)
testing$diagnosis
training$diagnosis
pred <- predict(testing$diagnosis, modFit)
pred
modFit
predict(modFit, newdata = testing)
predictions_raw <- predict(modFit, newdata = testing)
confusionMatrix(predictions_raw, testing$diagnosis)
nonPCA <- confusionMatrix(predictions_raw, testing$diagnosis)
modFit <- train(diagnosis ~., data = training_new, method = "pca", method = "glm")
?train
?preProcess
preProcess(training_new, method = "pca")
install.packages("ElemStatLearn")
library("ElemStatLearn")
data(Ozone)
data("ozone")
ozone
ll <- matrix(NA, nrow = 10, ncol = 155)
ll
dim(ozone)
ss <- sample(1:dim(ozone)[1], replace = TRUE)
ozone0 <- ozone[ss, ]
head(ozone)
head(ozone0)
ozone0 <- ozone0[order(ozone0$ozone), ]
head(ozone0)
?loess
?function
?function()
?apply
?lm
?rptR
?stats
?apply
?lm
?stats
library(help = "stats")
?stats
search()
?stats
?graphics
search()
?graphics
?lm
require(graphics)
## Annette Dobson (1990) "An Introduction to Generalized Linear Models".
## Page 9: Plant Weight Data.
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
summary(lm)
summary(lm.D9)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
?rnorm
?glm
?apply
?sum
?mean
x <- c(0:10, 50)
xm <- mean(x)
c(xm, mean(x, trim = 0.10))
x = rnorm(1000, 100, 30)
?rnorm
par(mfrow=c(2,2))
hist(x, main="Raw value")
scale(x)
hist(scale(x), main="Scale function use")
?scale
hist(scale(x, scale = FALSE), main="scale(x, scale=FALSE)")
hist(scale(x, center = FALSE), main="scale(x, center=FALSE)")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
# scaled x
hist(scale(x), main="Scale function use")
?scale
hist(scale(x, scale = FALSE), main="scale(x, scale=FALSE)")
hist(scale(x, center = FALSE), main="scale(x, center=FALSE)")
hist(scale(x, center = FALSE, scale = FALSE), main="scale(x, center = FALSE, scale = FALSE)")
hist(scale(x, TRUE, FALSE), main="scale(x, TRUE, FALSE)")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
# scaled x
hist(scale(x), main="Scale function use, defaults")
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
hist(scale(x, scale = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x, FALSE, scale = TRUE), main="scale(x, scale = FALSE, TRUE)")
?scale
hist(scale(x, scale = TRUE, FALSE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x,TRUE,  scale = FALSE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x,TRUE,  sca = FALSE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x,TRUE,  sca = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x, sca = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
# scaled x
hist(scale(x), main="Scale function use, defaults")
?scale
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x, TRUE, FALSE), main="scale(x, TRUE, FALSE)")
# When calling a function you can specify arguments by position or by name
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
# scaled x
hist(scale(x), main="Scale function use, defaults")
?scale
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x, sca = FALSE, TRUE), main="scale(x, sca = FALSE, TRUE) /n better do not mix up")
# When calling a function you can specify arguments by position or by name
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
# scaled x
hist(scale(x), main="Scale function use, defaults")
?scale
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, sca = FALSE, TRUE) (better do not mix up)")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
hist((x-mean(x)/sd(x), main="scaled manually")
# scaled x
hist(scale(x), main="Scale function use, defaults")
?scale
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, sca = FALSE, TRUE) (better do not mix up)")
hist((x-mean(x)/sd(x), main="scaled manually")
hist((x-mean(x))/sd(x), main="scaled manually")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(3,2))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, sca = FALSE, TRUE) (better do not mix up)")
par(mfrow=c(4,2))
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(4,2))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
hist(scale(x), main="scale function, defaults")
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture not good (Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.)
hist(scale(x, sca = FALSE, TRUE), main="scale(x, sca = FALSE, TRUE) (better do not mix up)")
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, TRUE) (better do not mix up)")
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(4,2))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
hist(scale(x), main="scale function, defaults")
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# partial matching
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, ce = TRUE) (partial matching)")
# mixture of name and position (not recommended. leads to errors)
hist(scale(x, scale = FALSE, TRUE), main="scale(x, FALSE, TRUE)")
summary(lm)
summary(lm.D90)
lm.D90
summary(lm)$Coeffcients
str(summary(lm))
str(summary(lm.D90))
str(summary(lm.D90))$coefficients
str(summary(lm.D90))$coefficients
(summary(lm.D90))$coefficients
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
?gl
data(cars)
cars
View(cars)
data(mtcars)
mtcars
data(trees)
trees
data(diamonds)
data(faithful)
faithful
modfit <- lm(eruptions ~ waiting)
modfit <- lm(eruptions ~ waiting, data = faithful)
summary(modfir)
summary(modfit)
plot(modfit)
plot(faithful$er, faithful$wai)
plot(faithful$er, faithful$wai)
summary(modfit)
summary_modfit <- summary(modfit)
str(summary_modfit)
t_tab <- summary_modfit$coefficients
t_tab
t_tab
modfit
?faithful
sample(x,1:365,replace=TRUE)
?sample
x=20 # participants
sample(x,1:365,replace=TRUE)
1:365
?sample
participants <- 20 # participants
sample(x,1:365,replace=TRUE)
sample(participants,1:365,replace=TRUE)
sample(participants,size = 1:365,replace=TRUE)
sample(1:365 participants,,replace=TRUE)
sample(1:365, participants,,replace=TRUE)
s <- sample(1:365, participants,,replace=TRUE)
s <- sample(1:365, participants,replace=TRUE)
unique(s)
unique(s)
length(unique(s))
length(unique(s)) < length(s)
numeric(length(unique(s)) < length(s))
numeric(length(unique(s) < length(s))
)
numeric(length(unique(s) < length(s))
numeric(length(unique(s)) < length(s))
numeric(length(unique(s)) < length(s))
length(unique(s))
length(s)
as.numeric(length(unique(s)) < length(s))
p = numeric(60)   # initialize vector, all  0s
?prod
n = 1:60          # vector of  room sizes
p = numeric(60)   # initialize vector, all  0s
for (i in n)      # index  values  for loop
{
q = prod(1  - (0:(i-1))/365)  # P(No match)  if i people  in room
p[i] = 1 - q                  # changes ith element  of  p
}
plot(n, p)        # plot of  p against n
?rnorm
x = rnorm(n = 1000, mean = 100, sd = 30)
par(mfrow=c(4,2))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
hist(scale(x), main="scale function, defaults")
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# partial matching
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, ce = TRUE) (partial matching)")
# mixture of name and position (not recommended. leads to errors)
hist(scale(x, scale = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
par(mfrow=c(3,3))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
# partial matching
# specify arguments by position
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, ce = TRUE) (partial matching)")
# specify arguments by names (position irrelevant)
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# mixture of name and position (not recommended. leads to errors)
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
hist(scale(x, scale = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x), main="scale function, defaults")
data(faithful)
?faithful
# build a linear model
modfit <- lm(eruptions ~ waiting, data = faithful)
# look at the output
modfit
# summary of modfit
summary(modfit)
summary_modfit <- summary(modfit)
str(summary_modfit)
t_table <- summary_modfit$coefficients
t_table
library(broom)
tidy(modfit)
?tidy
augment(modfit)
glance(modfit) #
x <- 20 # participants
s <- sample(1:365, x,replace=TRUE)
length(unique(s))
# are there double birthdays?
length(unique(s)) < length(s)
# transform into number (0 if no, 1 if yes)
double_birthday <- as.numeric(length(unique(s)) < length(s))
double_birthday
nsim <- 1000 # number of simulated classrooms
res=rep(NA,nsim) # predefine vector
for(i in 1:nsim) {
s = sample(1:365,x,replace=TRUE)
res[i] = as.numeric(length(unique(s)) < length(s))
}
length(res[res==1]) / nsim
n = 1:60          # vector of  room sizes
p = numeric(60)   # initialize vector, all  0s
for (i in n){      # index  values  for loop
q = prod(1  - (0:(i-1))/365)  # P(No match)  if i people  in room
p[i] = 1 - q                  # changes ith element  of  p
}
plot(n, p)
?prod
double_bday <- function(n) {      # n is the number of people in the classroom
q <- prod(1  - (0:(n-1))/365) # P(No match)  if i people  in room
p <- 1 - q                    # returns always last calculated element
}
double_bday(10)
double_bday <- function(n) {      # n is the number of people in the classroom
q <- prod(1  - (0:(n-1))/365) # P(No match)  if i people  in room
p <- 1 - q                    # returns always last calculated element
p
}
double_bday(10)
double_bday(100)
?apply
?tapply
?vapply
?apply
?sapply
p_vec <- sapply(n = 1:60, double_bday)
double_bday <- function(n) {      # n is the number of people in the classroom
q <- prod(1  - (0:(n-1))/365) # P(No match)  if i people  in room
p <- 1 - q
p
}
p_vec <- sapply(n = 1:60, double_bday)
p_vec <- sapply(n = 1:60, double_bday())
p_vec <- sapply(1:60, double_bday)
n <- 1:60
p_vec <- sapply(n, double_bday) # apply
plot(n, p_vec)
?par
op <- par(mfrow=c(4,2))
op
par(mfrow = c(1,1))
op <- par(mfrow=c(4,2))
hist(x, main="Raw value")
hist((x-mean(x))/sd(x), main="scaled manually")
# scaled x
?scale
hist(scale(x), main="scale function, defaults")
# specify arguments by names (position irrelevant)
hist(scale(x, center = TRUE, scale = FALSE), main="scale(x, center = TRUE, scale = FALSE)")
hist(scale(x, scale = FALSE, center = TRUE), main="scale(x,  scale = FALSE, center = TRUE)")
# specify arguments by position
hist(scale(x, FALSE, TRUE), main="scale(x, FALSE, TRUE)")
# partial matching
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, ce = TRUE) (partial matching)")
# mixture of name and position (not recommended. leads to errors)
hist(scale(x, scale = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
par(op)
hist(scale(x, sca = FALSE, ce = TRUE), main="scale(x, sca = FALSE, ce = TRUE) (partial matching)")
# mixture of name and position (not recommended. leads to errors)
hist(scale(x, scale = FALSE, TRUE), main="scale(x, scale = FALSE, TRUE)")
data(mtcars)
mtcars
names(mtcars) # variable names
?mtcars
apply(mtcars, 2, median)
apply(mtcars, 2, max)
summary(mtcars)
apply(mtcars, 2, function(x) x <- mean(x) / sd(x))
standardize <- function(x) {           # or you can define the function before
x <- mean(x) / sd(x)
}
apply(mtcars, 2, standardize)
?Rprof
Rprof()
g2_microsats(genotypes, nperm = 100, nboot = 100, CI = 0.95))
Rprof(NULL)
Rprof()
g2_microsats(genotypes, nperm = 100, nboot = 100, CI = 0.95)
Rprof(NULL)
library(inbreedR)
Rprof()
g2_microsats(genotypes, nperm = 100, nboot = 100, CI = 0.95)
Rprof(NULL)
?g2_microsats
data(seal_microsats)
genotypes <- convert_raw(seal_microsats, NAval = NA)
Rprof()
g2_microsats(genotypes, nperm = 100, nboot = 100, CI = 0.95)
Rprof(NULL)
getwd()
summaryRprof()
Rprof()
g2_microsats(genotypes, nperm = 100, nboot = 100, CI = 0.95)
Rprof(NULL)
summaryRprof()
data(mice_snp_genotypes)
Rprof()
g2_snps(mice_snp_genotypes, nperm = 100, nboot = 100, CI = 0.95)
Rprof(NULL)
summaryRprof()
library(shiny)
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
library(devtools)
install.github("eriqande/inbredPermute")
install_github("eriqande/inbredPermute")
?inbredPermute
library(inbredPermute)
?inbredPermute
setwd("C:/Users/Martin/Studium/projects/Rpackages/minmodelr")
library(roxygen2)
library(devtools)
setwd("C:/Users/Martin/Studium/projects/Rpackages/minmodelr/R")
document()
?minmodelr
